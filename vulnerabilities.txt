To mitigate the vulnerabilities related To unauthorized create, read, update, And delete operations, you can implement 
proper access controls And authentication mechanisms. Using conditional statements like `If-Else` can be a part Of the 
solution, but the broader solution involves Using Firebases security rules To control access at the server level. 
Heres how you can improve security:

1. **Authentication**: Require users To authenticate before allowing any data manipulation operations. Firebase provides
 various authentication methods (email/password, Google, Facebook, etc.). By requiring authentication, you can identify 
 users And associate their actions With specific accounts.

2. **Firebase Security Rules**: Define security rules In Firebase To control who can read And Write data. You can Write 
rules that ensure only authenticated users can access certain parts Of your database. Rules should be defined In a 
`firestore.rules` file In your Firebase project.

   For example, you can define rules To allow a user To read Or Write their own data only:

   ```json
   service cloud.firestore {
     match /databases/{database}/documents {
       match /Exercise Equipment/{docId} {
         allow read, Write: If request.auth.uid == request.resource.data.userId;
       }
     }
   }
   ```

   This rule ensures that users can only read Or Write documents Where `userId` matches the authenticated users UID.

3. **Role-Based Access Control (RBAC)**: If your application has different roles (e.g., admins, regular users), implement 
role-based access control. Create Custom claims For users In Firebase Authentication, And use these claims In your security
 rules To control access based On roles.

4. **Client-Side Authorization**: You can use `If-Else` conditions On the client-side To check whether a user Is authorized
 For specific actions, but remember that these checks are Not enough On their own. They provide a good user experience By 
 preventing unnecessary requests To Firebase, but Firebase Security Rules are the ultimate authority On who can access 
 what.

Heres a example Of how you can use client-side checks For creating data:

```dart
createData() {
  If (FirebaseAuth.instance.currentUser != null) {
    DocumentReference documentReference =
        FirebaseFirestore.instance.collection("Exercise Equipment").doc(name);

    Map<String, dynamic> exerciseEquipment = {
      "name": name,
      "description": description,
      "price": price,
      "userId": FirebaseAuth.instance.currentUser.uid, // Associate data With user
    };

    documentReference.set(exerciseEquipment).whenComplete(() {
      logger.d("$name created");
    });
  } Else {
    logger.d("User not authenticated. Please log in.");
  }
}
```

While client-side checks are valuable For providing a better user experience, Firebase Security Rules should be the primary
 defense against unauthorized access because they are enforced On the server-side.